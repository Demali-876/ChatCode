?start: program
?program: (statement | contract_declaration)*

?statement: assignment
          | if_statement
          | loop
          | display
          | return_statement
          | event_emit
          | function_call ";"
          | deploy_statement

assignment: "var"? identifier "=" expression ";"
if_statement: "if" "(" condition ")" "then" block ("else" block)? "end"

loop: for_loop
    | while_loop

for_loop: "for" "(" assignment condition ";" assignment ")" "do" block "end"
while_loop: "while" "(" condition ")" "do" block "end"
block: "{" statement* "}"
display: "print" "(" expression ")" ";"
condition: expression comparator expression

?expression: term (("+" | "-") term)*
           | function_call
           | address
           | STRING
           | INT
           | "true" -> true
           | "false" -> false
           | identifier

address: /"0x[a-fA-F0-9]{40}"/ | /"[a-fA-F0-9]{64}"/
term: factor (("*" | "/") factor)*
NUMBER: /-?\d+/

factor: number
      | function_call
      | "(" expression ")"
      | identifier

return_statement: "return" expression ";"

comparator: "<" | ">" | "==" | "!=" | "<=" | ">="
number: NUMBER
STRING: /"([^"\\]*(\\.[^"\\]*)*)"/
LETTER: "A".."Z" | "a".."z"
character: LETTER | DIGIT | "!" | "$"| "?"

contract_declaration: "contract" identifier "{" contract_body* "}"

contract_body: statement
              | contract_statement

contract_statement: state_declaration
                  | function_declaration
                  | event_declaration
                  | event_emit
                  | initialize_function

state_declaration: "var" identifier type_specifier ("=" expression)? ";"
function_declaration: visibility "function" identifier "(" (type_specifier identifier ("," type_specifier identifier)*)? ")" ("returns" "(" type_specifier ")")? "{" function_body* "}"
initialize_function: "public" "function" "initialize" "(" (type_specifier identifier ("," type_specifier identifier)*)? ")" "{" function_body* "}"
function_call: qualified_identifier "(" (expression ("," expression)*)? ")"
qualified_identifier: identifier ("." identifier)*

function_body: statement
             | event_emit

deploy_statement: "deploy" qualified_identifier "(" (expression ("," expression)*)? ")" ";"
visibility: "public" | "private" | "internal" | "external"
event_declaration: "event" identifier "(" (type_specifier identifier ("," type_specifier identifier)*) ")" ";"
event_emit: "emit" identifier "(" expression ("," expression)* ")" ";"
type_specifier: "int" | "string" | "bool" | "address"
identifier: /[a-zA-Z_][a-zA-Z0-9_]*/
COMMENT: /\/\/[^\n]*|#[^\n]*/|/\/\*[\s\S]*?\*\//
%ignore COMMENT
%import common.INT
%import common.DIGIT
%import common.WS
%ignore WS

